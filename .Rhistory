read.csv("activity.csv")
unzip("./activity.zip")
read.csv("activity.csv")
activity <- read.csv("activity.csv")
summary(activity)
str()
str(activity)
activity %>% group_by(date(day))
library(tidyverse)
str(activity)
activity %>% group_by(date(day))
aggregate(.~date,activity,mean)
aggregate(.~date,activity,sum)
# Calculate the total number of steps taken per day
totalSteps <- aggregate(.~date,activity,sum)
totalSteps
ggplot(totalSteps,aes(date,steps)) %>% geom_histogram()
ggplot(totalSteps,aes(date,steps))+  geom_histogram()
ggplot(totalSteps,aes(date,steps))+ geom_histogram(stat = "identity")
hist(steps,date,data=totalSteps)
totalSteps
hist(data=totalSteps)
hist(data=totalSteps,steps,date,)
hist(data=totalSteps,totalSteps$steps,totalSteps$date)
hist(totalSteps$steps,totalSteps$date,data=totalSteps,)
hist(totalSteps$steps,totalSteps$date,data=totalSteps)
totalSteps
hist(totalSteps$steps,data=totalSteps)
ggplot(totalSteps,aes(date,steps))+ geom_histogram(stat = "identity")
hist(totalSteps$steps,data=totalSteps)
hist(totalSteps$stepss)
hist(totalSteps$steps)
hist(totalSteps$steps,xlab = "Total steps")
hist(totalSteps$steps,xlab = "Total steps",main="Histogram of the total number of steps taken each day")
totalSteps
#Calculate and report the mean and median of the total number of steps taken per day
median(totalSteps$steps)
mean(totalSteps$steps)
# Make a time series plot (i.e. type = "l") of the 5-minute interval (x-axis) and the average number of steps taken, averaged across all days (y-axis)
totalSteps2 <- aggregate(.~date,activity,mean)
totalSteps2
plot(steps,date,data=totalSteps2,type="l")
plot(totalSteps2$steps,totalSteps2$date,type="l")
totalSteps2
# Calculate the total number of steps taken per day
totalSteps <- aggregate(steps~date,activity,sum)
hist(totalSteps$steps,xlab = "Total steps",main="Histogram of the total number of steps taken each day")
#Calculate and report the mean and median of the total number of steps taken per day
median(totalSteps$steps)
mean(totalSteps$steps)
# Make a time series plot (i.e. type = "l") of the 5-minute interval (x-axis) and the average number of steps taken, averaged across all days (y-axis)
totalSteps2 <- aggregate(steps~interval,activity,mean)
totalSteps2
plot(totalSteps2$steps,totalSteps2$date,type="l")
totalSteps2
plot(totalSteps2$steps,totalSteps2$interval,type="l")
totalSteps2
plot(totalSteps2$interval,totalSteps2$steps,type="l")
plot(totalSteps2$interval,totalSteps2$steps,type="l",x="Interval","Average number of steps",main="Average number of steps taken averaged across all days")
plot(totalSteps2$interval,totalSteps2$steps,type="l",xlab = ="Interval","Average number of steps",main="Average number of steps taken averaged across all days")
plot(totalSteps2$interval,totalSteps2$steps,type="l",xlab = ="Interval",ylab="Average number of steps",main="Average number of steps taken averaged across all days")
plot(totalSteps2$interval,totalSteps2$steps,type="l",xlab = "Interval",ylab="Average number of steps",main="Average number of steps taken averaged across all days")
totalSteps2
# Which 5-minute interval, on average across all the days in the dataset, contains the maximum number of steps?
max(totalSteps2)
totalSteps2
totalSteps %>% filter(Steps=max(Steps))
totalSteps %>% filter(Steps=max(steps))
totalSteps %>% filter(steps=max(steps))
totalSteps %>% filter(steps==max(steps))
totalSteps2 %>% filter(steps==max(steps))
# Calculate and report the total number of missing values in the dataset (i.e. the total number of rows with NAs)
is.na(activity)
# Calculate and report the total number of missing values in the dataset (i.e. the total number of rows with NAs)
c(is.na(activity))
# Calculate and report the total number of missing values in the dataset (i.e. the total number of rows with NAs)
colSums(is.na(activity))
# Calculate and report the total number of missing values in the dataset (i.e. the total number of rows with NAs)
rowSums(is.na(activity))
# Calculate and report the total number of missing values in the dataset (i.e. the total number of rows with NAs)
colSums(is.na(activity))
head(activity)
# Devise a strategy for filling in all of the missing values in the dataset. The strategy does not need to be sophisticated. For example, you could use the mean/median for that day, or the mean for that 5-minute interval, etc.
aggregate(steps~interval,activity,mean)
head(activity)
# Devise a strategy for filling in all of the missing values in the dataset. The strategy does not need to be sophisticated. For example, you could use the mean/median for that day, or the mean for that 5-minute interval, etc.
aggregate(steps~datel,activity,mean)
# Devise a strategy for filling in all of the missing values in the dataset. The strategy does not need to be sophisticated. For example, you could use the mean/median for that day, or the mean for that 5-minute interval, etc.
aggregate(steps~date,activity,mean)
# Devise a strategy for filling in all of the missing values in the dataset. The strategy does not need to be sophisticated. For example, you could use the mean/median for that day, or the mean for that 5-minute interval, etc.
aggregate(.~date,activity,mean)
head(activity)
# Devise a strategy for filling in all of the missing values in the dataset. The strategy does not need to be sophisticated. For example, you could use the mean/median for that day, or the mean for that 5-minute interval, etc.
aggregate(.~date,activity,mean)
head(activity)
activity2[is.na(activity$steps)] <- mean(activity$steps, na.rm = TRUE)
activity2 <- activity
activity2[is.na(activity$steps)] <- mean(activity$steps, na.rm = TRUE)
activity2[is.na(activity2$steps)] <- mean(activity2$steps, na.rm = TRUE)
activity2
mean(activity2$steps, na.rm = TRUE)
activity2[is.na(activity2$steps)] <- mean(activity2$steps, na.rm = TRUE)
activity2[is.na(activity2$steps),] <- mean(activity2$steps, na.rm = TRUE)
activity2
colSums(is.na(activity2))
totalSteps <- aggregate(steps~date,activity2,sum)
totalSteps3 <- aggregate(steps~date,activity2,sum)
hist(totalSteps3$steps,xlab = "Total steps",main="Histogram of the total number of steps taken each day")
# Calculate the total number of steps taken per day
totalSteps <- aggregate(steps~date,activity,sum)
hist(totalSteps$steps,xlab = "Total steps",main="Histogram of the total number of steps taken each day")
#Calculate and report the mean and median of the total number of steps taken per day
median(totalSteps$steps)
mean(totalSteps$steps)
# Make a time series plot (i.e. type = "l") of the 5-minute interval (x-axis) and the average number of steps taken, averaged across all days (y-axis)
totalSteps2 <- aggregate(steps~interval,activity,mean)
plot(totalSteps2$interval,totalSteps2$steps,type="l",xlab = "Interval",ylab="Average number of steps",main="Average number of steps taken averaged across all days")
# Which 5-minute interval, on average across all the days in the dataset, contains the maximum number of steps?
totalSteps2 %>% filter(steps==max(steps))
# Calculate and report the total number of missing values in the dataset (i.e. the total number of rows with NAs)
colSums(is.na(activity))
head(activity)
activity2 <- activity
activity2[is.na(activity2$steps),] <- mean(activity2$steps, na.rm = TRUE)
totalSteps3 <- aggregate(steps~date,activity2,sum)
hist(totalSteps3$steps,xlab = "Total steps",main="Histogram of the total number of steps taken each day")
head(totalSteps3)
activity2 <- activity
activity2[is.na(activity2$steps),] <- mean(activity2$steps)
totalSteps3 <- aggregate(steps~date,activity2,sum)
head(totalSteps3)
hist(totalSteps3$steps,xlab = "Total steps",main="Histogram of the total number of steps taken each day")
#Calculate and report the mean and median of the total number of steps taken per day
median(totalSteps3$steps)
mean(totalSteps3$steps)
median(totalSteps$steps)
mean(totalSteps$steps)
median(totalSteps3$steps)
mean(totalSteps3$steps)
median(totalSteps$steps)
#Calculate and report the mean and median of the total number of steps taken per day
mean(totalSteps$steps)
#Calculate and report the mean and median of the total number of steps taken per day
mean(totalSteps$steps)
median(totalSteps$steps)
#Calculate and report the mean and median of the total number of steps taken per day
mean(totalSteps$steps)
median(totalSteps$steps)
hist(totalSteps3$steps,xlab = "Total steps",main="Histogram of the total number of steps taken each day with missing values averaged")
hist(totalSteps3$steps,xlab = "Total steps",main="Total number of steps taken each day with missing values averaged")
median(totalSteps$steps)
mean(totalSteps$steps)
median(totalSteps3$steps)
mean(totalSteps3$steps)
mean(totalSteps$steps)
median(totalSteps3$steps)
mean(totalSteps3$steps)
median(totalSteps$steps)
mean(totalSteps$steps)
median(totalSteps3$steps)
mean(totalSteps3$steps)
# Create a new factor variable in the dataset with two levels – “weekday” and “weekend” indicating whether a given date is a weekday or weekend day.
head(activity)
weekdays(activity$day)
# Create a new factor variable in the dataset with two levels – “weekday” and “weekend” indicating whether a given date is a weekday or weekend day.
head(activity)
weekdays(activity$date)
# Create a new factor variable in the dataset with two levels – “weekday” and “weekend” indicating whether a given date is a weekday or weekend day.
head(activity)
as.Date(activity$)
# Create a new factor variable in the dataset with two levels – “weekday” and “weekend” indicating whether a given date is a weekday or weekend day.
head(activity)
as.Date(activity$date)
activity$date <- as.Date(activity$date)
head(activity)
weekdays(activity$date)
activity$date <- weekdays(activity$date)
head(activity)
activity %>% recode('Weekday'='Monday')
activity %>% recode('Weekday'='Monday',date)
activity %>% recode('Monday'='Weekday',date)
activity %>% recode('Monday'='Weekday')
recode('Monday'='Weekday')
recode('Monday'='Weekday',activity$date)
recode("Monday"='weekday',"Tuesday"='weekday',"Wednesday"='weekday',"Thursday"='weekday',"Friday"='weekday',"Saturday"='weekend',"Sunday"='weekend',activity$date)
activity$date <- recode("Monday"='weekday',"Tuesday"='weekday',"Wednesday"='weekday',"Thursday"='weekday',"Friday"='weekday',"Saturday"='weekend',"Sunday"='weekend',activity$date)
table(activity$date)
head(activity)
aggregate(.~date,activity,mean)
head(activity)
aggregate(steps~interval+date,activity,mean)
plot(activity$interval,activity$steps,type="l",xlab = "Interval",ylab="Average number of steps",main="Average number of steps taken averaged across all days")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
unzip("./activity.zip")
activity <- read.csv("activity.csv")
summary(activity)
str(activity)
# Calculate the total number of steps taken per day
totalSteps <- aggregate(steps~date,activity,sum)
# If you do not understand the difference between a histogram and a barplot, research the difference between them. Make a histogram of the total number of steps taken each day
hist(totalSteps$steps,xlab = "Total steps",main="Total number of steps taken each day")
#Calculate and report the mean and median of the total number of steps taken per day
mean(totalSteps$steps)
median(totalSteps$steps)
# Make a time series plot (i.e. type = "l") of the 5-minute interval (x-axis) and the average number of steps taken, averaged across all days (y-axis)
totalSteps2 <- aggregate(steps~interval,activity,mean)
plot(totalSteps2$interval,totalSteps2$steps,type="l",xlab = "Interval",ylab="Average number of steps",main="Average number of steps taken averaged across all days")
# Which 5-minute interval, on average across all the days in the dataset, contains the maximum number of steps?
totalSteps2 %>% filter(steps==max(steps))
# Calculate and report the total number of missing values in the dataset (i.e. the total number of rows with NAs)
colSums(is.na(activity))
# Devise a strategy for filling in all of the missing values in the dataset. The strategy does not need to be sophisticated. For example, you could use the mean/median for that day, or the mean for that 5-minute interval, etc.
# Create a new dataset that is equal to the original dataset but with the missing data filled in.
activity2 <- activity
activity2[is.na(activity2$steps),] <- mean(activity2$steps)
# Make a histogram of the total number of steps taken each day and Calculate and report the mean and median total number of steps taken per day. Do these values differ from the estimates from the first part of the assignment? What is the impact of imputing missing data on the estimates of the total daily number of steps?
totalSteps3 <- aggregate(steps~date,activity2,sum)
hist(totalSteps3$steps,xlab = "Total steps",main="Total number of steps taken each day with missing values averaged")
mean(totalSteps3$steps)
median(totalSteps3$steps)
# Create a new factor variable in the dataset with two levels – “weekday” and “weekend” indicating whether a given date is a weekday or weekend day.
activity3 <- activity
activity3$date <- as.Date(activity3$date)
activity3$date <- weekdays(activity3$date)
activity3$date <- recode("Monday"='weekday',"Tuesday"='weekday',"Wednesday"='weekday',"Thursday"='weekday',"Friday"='weekday',"Saturday"='weekend',"Sunday"='weekend',activity$date)
head(activity)
aggregate(steps~interval+date,activity,mean)
plot(activity$interval,activity$steps,type="l",xlab = "Interval",ylab="Average number of steps",main="Average number of steps taken averaged across all days")
plot(activity$interval,activity$steps,type="l",xlab = "Interval",ylab="Average number of steps",main="Average number of steps taken averaged across all days",facet_wrap(day))
plot(activity$interval,activity$steps,type="l",xlab = "Interval",ylab="Average number of steps",main="Average number of steps taken averaged across all days",facet_wrap(date))
plot(activity$interval,activity$steps,type="l",xlab = "Interval",ylab="Average number of steps",main="Average number of steps taken averaged across all days",facet_wrap(~date))
aggregate(steps~interval+date,activity3,mean)
plot(activity3$interval,activity3$steps,type="l",xlab = "Interval",ylab="Average number of steps",main="Average number of steps taken averaged across all days",facet_wrap(~date))
plot(activity3$interval,activity3$steps,type="l",xlab = "Interval",ylab="Average number of steps",main="Average number of steps taken averaged across all days",facet_wrap(~activity3$date))
aggregate(steps~interval+date,activity3,mean)
avgsteps <- aggregate(steps~interval+date,activity3,mean)
plot(avgsteps3$interval,avgsteps$steps,type="l",xlab = "Interval",ylab="Average number of steps",main="Average number of steps taken averaged across all days",facet_wrap(~aavgsteps$date))
plot(avgsteps3$interval,avgsteps$steps,type="l",xlab = "Interval",ylab="Average number of steps",main="Average number of steps taken averaged across all days",facet_wrap(~avgsteps$date))
plot(avgsteps$interval,avgsteps$steps,type="l",xlab = "Interval",ylab="Average number of steps",main="Average number of steps taken averaged across all days",facet_wrap(~avgsteps$date))
head(avgsteps)
plot(avgsteps$interval,avgsteps$steps,type="l",xlab = "Interval",ylab="Average number of steps",main="Average number of steps taken averaged across all days")
plot(avgsteps$interval,avgsteps$steps,type="l",xlab = "Interval",ylab="Average number of steps",main="Average number of steps taken averaged across all days"+Facet)
plot(avgsteps$interval,avgsteps$steps,type="l",xlab = "Interval",ylab="Average number of steps",main="Average number of steps taken averaged across all days")
ggplot(avgsteps,aes(x=interval,y=steps))+geom_line()
ggplot(avgsteps,aes(x=interval,y=steps,type="l"))+geom_line()
ggplot(avgsteps,aes(x=interval,y=steps,type="l"))
ggplot(avgsteps,aes(x=interval,y=steps,type="l"))+geom_line()
ggplot(avgsteps,aes(x=interval,y=steps,type="l"))+geom_line()+facet_wrap(~date)
head(avgsteps)
activity3
# Create a new factor variable in the dataset with two levels – “weekday” and “weekend” indicating whether a given date is a weekday or weekend day.
activity3 <- activity
activity3$date <- as.Date(activity3$date)
activity3$date <- weekdays(activity3$date)
activity3$date <- recode("Monday"='weekday',"Tuesday"='weekday',"Wednesday"='weekday',"Thursday"='weekday',"Friday"='weekday',"Saturday"='weekend',"Sunday"='weekend',activity$date)
activity3
activity3$dates <- recode("Monday"='weekday',"Tuesday"='weekday',"Wednesday"='weekday',"Thursday"='weekday',"Friday"='weekday',"Saturday"='weekend',"Sunday"='weekend',activity$date)
activity3
# Create a new factor variable in the dataset with two levels – “weekday” and “weekend” indicating whether a given date is a weekday or weekend day.
activity3 <- activity
activity3$date <- as.Date(activity3$date)
activity3$date <- weekdays(activity3$date)
activity3$dates <- recode("Monday"='weekday',"Tuesday"='weekday',"Wednesday"='weekday',"Thursday"='weekday',"Friday"='weekday',"Saturday"='weekend',"Sunday"='weekend',activity$date)
activity3
# Create a new factor variable in the dataset with two levels – “weekday” and “weekend” indicating whether a given date is a weekday or weekend day.
activity3 <- activity
activity3$date <- as.Date(activity3$date)
activity3$date <- weekdays(activity3$date)
activity3$dates <- recode("Monday"='weekday',"Tuesday"='weekday',"Wednesday"='weekday',"Thursday"='weekday',"Friday"='weekday',"Saturday"='weekend',"Sunday"='weekend',activity3$date)
activity3
# Create a new factor variable in the dataset with two levels – “weekday” and “weekend” indicating whether a given date is a weekday or weekend day.
activity3 <- activity
activity3$date <- as.Date(activity3$date)
activity3$date <- weekdays(activity3$date)
activity3$date <- recode("Monday"='weekday',"Tuesday"='weekday',"Wednesday"='weekday',"Thursday"='weekday',"Friday"='weekday',"Saturday"='weekend',"Sunday"='weekend',activity3$date)
activity3
ggplot(avgsteps,aes(x=interval,y=steps,type="l"))+geom_line()+facet_wrap(~date)
plot(avgsteps$interval,avgsteps$steps,type="l",xlab = "Interval",ylab="Average number of steps",main="Average number of steps taken averaged across all days")
aggregate(steps~interval+date,activity3,mean)
avgsteps <- aggregate(steps~interval+date,activity3,mean)
head(avgsteps)
ggplot(avgsteps,aes(x=interval,y=steps,type="l"))+geom_line()+facet_wrap(~date)
plot(avgsteps$interval,avgsteps$steps,type="l",xlab = "Interval",ylab="Average number of steps",main="Average number of steps taken averaged across all days")
ggplot(avgsteps,aes(x=interval,y=steps,type="l"))+geom_line()+facet_wrap(~date)+labs(title="Average number of steps taken averaged across all weekday and weekend days",ylab="Average number of steps")
ggplot(avgsteps,aes(x=interval,y=steps,col=date))+geom_line()+facet_wrap(~date)+labs(title="Average number of steps taken averaged across all weekday and weekend days",ylab="Average number of steps")
ggplot(avgsteps,aes(x=interval,y=steps,col=date))+geom_line()+facet_wrap(~date)+labs(title="Average number of steps taken averaged across all weekday and weekend days",y="Average number of steps")
ggplot(avgsteps,aes(x=interval,y=steps,col=date))+geom_line()+facet_wrap(~date,ncol=1)+labs(title="Average number of steps taken averaged across all weekday and weekend days",y="Average number of steps")
